---
layout: post
title:  "本机配置HTTPS"
date:   2019-03-29 01:24:27
categories: 张明远
---

HTTP作为常见的请求头，会以明文的方式发送与接收消息，易于遭受攻击。

HTTPS可以加密信息，防止敏感信息被第三方获取，安全级别需求较高的服务都会使用HTTPS协议。

以下主要介绍本机配置HTTPS协议

1.Ctrl+R，运行中输入 cmd ,进入jdk安装路径 bin 目录下

  <img class="" src="/images/blog/2019-03-29-本机配置Https/img1.png" />

2.D盘下创建test文件夹，输入

  keytool -genkey -v -alias tomcat -keyalg RSA -keystore D:\test\tomcat.keystore -validity 36500

  回车

  如下图：

  <img class="" src="/images/blog/2019-03-29-本机配置Https/img2.png" />

3.输入密钥库口令，需要确认，同时server.xml需要使用该口令，本次以123456为例

  <img class="" src="/images/blog/2019-03-29-本机配置Https/img3.png" />

4.输入名字、组织单位、组织、市、省、国家等信息 

5.确认输入 y，否则输入 n

6.确认后需要输入密钥库口令，需要确认，回车后生成证书，退出

  <img class="" src="/images/blog/2019-03-29-本机配置Https/img4.png" />

  <img class="" src="/images/blog/2019-03-29-本机配置Https/img5.png" />

7.在D:/test/tomcat.keystore 复制到tomcat下并在server.xml添加以下配置

  <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true" 

  	 maxThreads="150" scheme="https" secure="true"  

     clientAuth="false" keystoreFile="D:/Develops/apache-tomcat-7.0.85/conf/tomcat.keystore"  

     keystorePass="123456" sslProtocol="TLS" /> 
     
  其中keystorePass为密钥库口令， keystoreFile为证书路径

 8.在程序中web.xml添加以下配置
   <security-constraint>   
     <web-resource-collection >   
           <web-resource-name >SSL</web-resource-name>   
           <url-pattern>/*</url-pattern>   
     </web-resource-collection>                     
     <user-data-constraint>   
           <transport-guarantee>CONFIDENTIAL</transport-guarantee>   
     </user-data-constraint>   
   </security-constraint>  

9.启动tomcat，测试https://localhost:8443 ，访问成功



[张明远]:      https://zmy1123347389.github.io/
